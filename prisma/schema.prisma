// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model JobClassification {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  description       String   @unique
  costCenter        Int
  code              Int
  eeoClassification Int
  facility          Int      @default(2046)
  pcrIds            String[] @db.ObjectId
  pcrs              PCR[]
  title             String
  userIds           String[] @db.ObjectId
  users             User[]
  workCompClass     Int
}

model PCR {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  after               Float
  // costCenter          Int?
  date                DateTime
  // eeoClassification   Int?
  explanation         String
  facility            Int               @default(2046)
  jobClassificationId String            @db.ObjectId
  jobClassification   JobClassification @relation(fields: [jobClassificationId], references: [id])
  previous            Float
  previousPCRIds      String[]          @db.ObjectId
  previousPCRs        PCR[]             @relation("PCR Relation")
  newPCR              PCR?              @relation("PCR Relation", fields: [previousPCRIds], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reasonId            String            @db.ObjectId
  reason              PCRReason         @relation(fields: [reasonId], references: [id])
  // title               String?
  userId              String?           @db.ObjectId
  user                User?             @relation(fields: [userId], references: [id])
}

model PCRReason {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        Int      @unique
  description String   @unique
  pcrIDs      String[] @db.ObjectId
  pcrs        PCR[]
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  isActive            Boolean            @default(false)
  isOnboarded         Boolean            @default(false)
  jobClassificationId String?            @db.ObjectId
  jobClassification   JobClassification? @relation(fields: [jobClassificationId], references: [id])
  passwordHash        String
  pcrIds              String[]           @db.ObjectId
  pcrs                PCR[]
  profileId           String?            @db.ObjectId
  profile             UserProfile?
  username            String             @unique
}

model UserProfile {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  dateHired           DateTime
  ennisId             Int
  email               String
  emailSignatureTitle String
  extension           Int
  firstName           String
  lastName            String
  userId              String?  @unique @db.ObjectId
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
